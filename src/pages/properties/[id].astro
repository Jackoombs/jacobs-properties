---
import ImageSlider from "../../components/ImageCarousel/ImageSlider";
import Link from "../../components/General/Link";
import Copy from "../../components/General/Text/Copy";
import SectionHeader from "../../components/General/Text/SectionHeader";
import PropertyDetails from "../../components/Property/PropertyDetails";
import StandardLayout from "../../layouts/StandardLayout.astro";
import BookAViewingButton from "../../components/Form/BookAViewing/Button";
import type { Property } from "../../env";
import type { GoogleMapProps } from "@react-google-maps/api";
import StampDutyCalc from "../../components/Calculators/StampDutyCalc";
import MortgageCalc from "../../components/Calculators/MortgageCalc";
import PropertySlider from "../../components/Property/PropertySlider";
import { toArray } from "../../utils";
import MiscSection from "../../components/Layout/MiscSection.astro";

export async function getStaticPaths() {
  const res = await fetch("https://jacobs-server.onrender.com/properties");
  const propertyList = await res.json();
  return propertyList.map((property: Property) => ({
    params: {
      id: property.ID,
    },
    props: {
      property,
    },
  }));
}

let {
  ID,
  Description,
  Image,
  Address1,
  Address2,
  PriceString,
  TotalBedrooms,
  ReceptionRooms,
  Bathrooms,
  Floorplan,
  EPC,
  InternalLettingStatus,
  InternalSaleStatus,
}: Property = Astro.props.property;

const EPCArray = toArray(EPC);
const FloorplanArray = toArray(Floorplan);

const res2 = await fetch(
  `https://maps.googleapis.com/maps/api/geocode/json?address=${Address1}%20${Address2}&key=${
    import.meta.env.PUBLIC_GOOGLE_MAPS_KEY
  }`
);
const data = await res2.json();
const Location: GoogleMapProps["center"] | undefined =
  data.results[0]?.geometry?.location;
let salesStatus = InternalLettingStatus ? "lettings" : "sales";

const priceStringToPriceNumber = (price: string): number => {
  return +price.split(" ")[0].replace(/[^0-9.]/g, "");
};

const findSimilarllyPricedProperties = (
  propertyList: Property[],
  propertyPrice: string
) => {
  const value = priceStringToPriceNumber(propertyPrice);

  propertyList.sort((a, b) => {
    const priceA = priceStringToPriceNumber(a.PriceString);
    const priceB = priceStringToPriceNumber(b.PriceString);
    const differenceA = priceA > value ? priceA - value : value - priceA;
    const differenceB = priceB > value ? priceB - value : value - priceB;

    return differenceA > differenceB ? 1 : -1;
  });

  return propertyList;
};

const res3 = await fetch(
  `https://jacobs-server.onrender.com/properties/${salesStatus}`
);
const similarProperties: Property[] = await res3.json();
const similarPropertiesFilteredSorted = findSimilarllyPricedProperties(
  similarProperties,
  PriceString
).filter((property) => property.ID !== ID);
console.log(Location);
---

<StandardLayout title={`${Address1} | Jacobs Properties`} description="">
  <section class="py-10 md:pb-28">
    <div
      class="mx-auto flex w-full max-w-container-lg flex-col gap-4 xl:flex-row xl:justify-between xl:gap-16"
    >
      <ImageSlider
        client:load
        images={Image.map((image) => image.Filepath)}
        description="hi"
        ID={ID}
      />
      <div class="grid flex-1 sm:max-w-[34rem] xl:grid-rows-[1fr_auto_1fr]">
        <a
          class="hidden w-max pb-6 text-[0.75rem] font-semibold uppercase leading-[1.1] tracking-[2.8px] text-primary-100 duration-100 hover:text-secondary-100 lg:text-[0.875rem] xl:block"
          href="">Back to properties</a
        >
        <div class="flex flex-col gap-2 lg:gap-5">
          <p
            class="mb-2 flex h-10 w-max items-center justify-center rounded-md bg-secondary-100 px-7 text-[0.875rem] font-semibold uppercase tracking-[1.4px] text-primary-100 duration-100 lg:h-14"
          >
            For sale
          </p>
          <ul class="flex gap-7 text-primary-100">
            <li
              class="text-[0.875rem] font-semibold uppercase tracking-[1.4px]"
            >
              {`${TotalBedrooms} Bed`}
            </li>
            <div class="h-3 self-center border-l-2 border-secondary-100"></div>
            <li
              class="text-[0.875rem] font-semibold uppercase tracking-[1.4px]"
            >
              {`${Bathrooms} Bath`}
            </li>
          </ul>
          <div class="pb-4 lg:pb-0">
            <SectionHeader className={"lg:pb-2"}
              >{`${Address1}, ${Address2}`}</SectionHeader
            >
            <SectionHeader>{PriceString}</SectionHeader>
          </div>
          {
            Description && (
              <Copy
                className="text-ellipsis whitespace-pre-line line-clamp-3"
                size="lg"
              >
                {Description}
              </Copy>
            )
          }
          <div class="flex flex-col gap-3 sm:flex-row">
            <BookAViewingButton
              price={PriceString}
              address={`${Address1}, ${Address2}`}
              size="lg">Book a viewing</BookAViewingButton
            >
            <Link size="lg" link="/" type="secondary">Share property</Link>
          </div>
        </div>
      </div>
    </div>
  </section>

  <PropertyDetails
    details={{
      Description,
      Floorplan: FloorplanArray,
      EPC: EPCArray,
    }}
    location={Location}
    address={`${Address1},${Address2}`}
    client:visible
  />

  <MiscSection>
    <SectionHeader padding="misc"
      >Try one of our useful calculatorsâ€¦
    </SectionHeader>
    <div class="flex w-full flex-col gap-7 lg:flex-row xl:gap-16">
      <StampDutyCalc client:visible />
      <MortgageCalc client:visible />
    </div>
  </MiscSection>

  <MiscSection bgColor="bg-primary-200" overflowVisible={false}>
    <PropertySlider
      client:idle
      header="Similar Properties"
      properties={similarPropertiesFilteredSorted}
    />
  </MiscSection>
</StandardLayout>
